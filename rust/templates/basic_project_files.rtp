packages================ ./${service_name}/
api,business,db,commands,middlewares,config

================end

file================ ./${service_name}/.gitignore
*.pyc
.idea/*
.project
.*~
*.DS_Store
node_modules
static/upload/

================end

file================ ./${service_name}/manage.py
#!/usr/bin/env python

import sys
from rust.command import command_manager

if __name__ == '__main__':
    command = sys.argv[1]
    command_manager.run_command(command)

================end

file================ ./${service_name}/settings.py
#coding: utf8

import os

PROJECT_HOME = os.path.dirname(os.path.abspath(__file__))

DEBUG = (os.environ.get('_DEBUG', '0') == '1')
MODE = os.environ.get('_SERVICE_MODE', 'develop')
SERVICE_NAME = '${service_name}'

DB_HOST = os.environ.get('_DB_HOST', 'db.dev.com')
DB_NAME = os.environ.get('_DB_NAME', 'service_name')
DB_USER = os.environ.get('_DB_USER', 'service_name')
DB_PORT = os.environ.get('_DB_PORT', '3306')
DB_PASSWORD = os.environ.get('_DB_PASSWORD', '123456')

DATABASES = {
    'default': {
        'ENGINE': 'mysql+retry',
        'NAME': DB_NAME,
        'USER': DB_USER,
        'PASSWORD': DB_PASSWORD,
        'HOST': DB_HOST,
        'PORT': DB_PORT,
        'CONN_MAX_AGE': 100
    }
}

#信息输出配置
DUMP_API_CALL_RESULT = True
ENABLE_CONSOLE = (os.environ.get('_ENABLE_API_CONSOLE', '1') == '1')
SERVICE_HOST = '127.0.0.1:9001'

UPLOAD_DIR = os.path.join(PROJECT_HOME, 'static', 'upload')  # 文件上传路径
UPLOAD_HTTP_PATH = '/static/upload'

#无需经过中间件的资源
DIRECT_PATHS = [
    '/static/',
    '/console',
    '/logined_user/',
]

RUST_RESOURCES = [
    'user',
    'permission',
]

CORS_WHITE_LIST = [] #为空则表示接受所有host

def load_custom_configs():
    configs = {}
    for f in os.listdir('./config'):
        if f.startswith('__init'):
            continue

        if f.endswith('.py'):
            module_part = f[0:-3]
            module_name = 'config.{}'.format(module_part)
            module = __import__(module_name, {}, {}, ['*',])
            for attr in module.__dict__.keys():
                if attr.startswith('__'):
                    continue

                if attr in configs:
                    print '[WARN]: settings.%s(%s) is already defined' % (attr, f)

                configs[attr] = getattr(module, attr)

    return configs

locals().update(load_custom_configs())

================end

file================ ./${service_name}/api/resources.py
#coding: utf8

================end

file================ ./${service_name}/config/middlewares.py
#coding: utf8

#中间件
MIDDLEWARES = [
    'rust.middlewares.check_point_middleware.CheckPointMiddleware', #必须在列表首位！！
]

================end

file================ ./${service_name}/config/error_handlers.py
#coding: utf8

#错误处理
ERROR_HANDLERS = [
    'rust.error_handlers.middleware_exception_handler.MiddlewareException',
]

================end

file================ ./${service_name}/config/domain_events.py
#coding: utf8

#领域事件处理
DOMAIN_EVENT_HANDLERS = {
    #以下为用例
    #'PROJECT.CREATED': [
	#	'business.project.events.project_created',
	#]
}

class __EventsObject(object):
	pass

"""
将字符串如'PROJECT.CREATED'转换成对象写法,
外部调用则变成events.PRODUCT.CREATED, 值为'PROJECT.CREATED'
注意：只支持2级，即不能出现USER.PROJECT.CREATED此类多级情况，
    业务需要的话，可以采用下划线方式:USER_PROJECT.CREATED
"""
DOMAIN_EVENTS = __EventsObject()
for event, module_paths in DOMAIN_EVENT_HANDLERS.items():
	k1, k2 = event.split('.')
	if not hasattr(k1, DOMAIN_EVENTS):
		k1_c = __EventsObject()
		setattr(DOMAIN_EVENTS, k1, k1_c)
	else:
		k1_c = getattr(DOMAIN_EVENTS, k1)
	setattr(k1_c, k2, event)

================end